<?php

namespace App\Tests\Controller;

use App\Entity\Point;
use App\Entity\Set;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Exception\ORMException;
use Doctrine\ORM\OptimisticLockException;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class RouteControllerTest extends WebTestCase
{
    private EntityManager $entityManager;
    private KernelBrowser $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = static::createClient();
        $this->entityManager = $this->client->getContainer()->get('doctrine.orm.default_entity_manager');
        $this->entityManager->createQuery('DELETE FROM App\Entity\Point as p')->execute();
        $this->entityManager->createQuery('DELETE FROM App\Entity\Route as r')->execute();
        $this->entityManager->createQuery('DELETE FROM App\Entity\Set as s')->execute();
    }

    /**
     * @throws OptimisticLockException
     * @throws ORMException
     */
    public function testCreateRoute(): void
    {
        $this->entityManager = self::getContainer()->get('doctrine')->getManager();
        $set = new Set();
        $set->setName('testowy zbiÃ³r');

        $this->entityManager->persist($set);

        foreach (range(0, 5) as $range) {
            $point = new Point();
            $point->setName('test point ' . $range);
            $point->setX(19.145136);
            $point->setY(51.919438);
            $point->setSet($set);
            $point->setWeight(300);

            $this->entityManager->persist($point);
        }

        $this->entityManager->flush();


        $crawler = $this->client->request('POST', '/route/generate/' . $set->getId(), [
            'maximum_duration' => 100,
            'maximum_distance' => 100,
            'radius' => 100,
        ]);

        $this->entityManager->refresh($set);

        $routes = $set->getRoutes();

        self::assertResponseRedirects(
            "/set?setId=" . $set->getId() . "&maximum_distance=100&maximum_duration=100&radius=100"
        );

        self::assertCount(1, $routes);
        self::assertCount(6, $routes[0]->getPoints());
    }
}
