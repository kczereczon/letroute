<?php

namespace App\Tests\Repository;

use App\Entity\Point;
use App\Entity\Route;
use App\Entity\Set;
use App\Repository\PointRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Exception\NotSupported;
use Doctrine\ORM\Exception\ORMException;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\OptimisticLockException;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class PointRepositoryTest extends KernelTestCase
{
    private EntityManager   $entityManager;
    private PointRepository $pointRepository;

    protected function tearDown(): void
    {
        parent::tearDown();

        $kernel = self::bootKernel();
        $entityManager = $kernel->getContainer()->get('doctrine.orm.default_entity_manager');
        $entityManager->createQuery('DELETE FROM App\Entity\Point as p')->execute();
        $entityManager->createQuery('DELETE FROM App\Entity\Route as r')->execute();
        $entityManager->createQuery('DELETE FROM App\Entity\Set as s')->execute();
    }

    /**
     * @throws NotSupported
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $kernel = self::bootKernel();
        $this->entityManager = $kernel->getContainer()->get('doctrine.orm.default_entity_manager');
        $this->pointRepository = $this->entityManager->getRepository(Point::class);
    }

    /**
     * @throws NonUniqueResultException
     * @throws NoResultException
     * @throws NotSupported
     */
    public function testSave(): void
    {
        $kernel = self::bootKernel();

        $countPoints = $this->entityManager->createQueryBuilder()
            ->select('count(p.id)')
            ->from(Point::class, 'p')
            ->getQuery()
            ->getSingleScalarResult();

        $this->assertEquals(0, $countPoints);

        $point = new Point();
        $point->setLat(51.919438);
        $point->setLon(19.145136);
        $point->setName('testowy punkt');
        $point->setWeight(300);

        $this->pointRepository->save($point, true);

        $countPoints = $this->entityManager->createQueryBuilder()
            ->select('count(p.id)')
            ->from(Point::class, 'p')
            ->getQuery()
            ->getSingleScalarResult();

        $this->assertEquals(1, $countPoints);

        /** @var Point $fetchedPoint */
        $fetchedPoint = $this->pointRepository->find($point->getId());

        $this->assertEquals($point->getId(), $fetchedPoint->getId());
        $this->assertEquals($point->getLat(), $fetchedPoint->getLat());
        $this->assertEquals($point->getLon(), $fetchedPoint->getLon());
        $this->assertEquals($point->getName(), $fetchedPoint->getName());
        $this->assertEquals($point->getWeight(), $fetchedPoint->getWeight());
        $this->assertEquals($point->getX(), $fetchedPoint->getX());
        $this->assertEquals($point->getY(), $fetchedPoint->getY());
        $this->assertEquals($point->getSet(), $fetchedPoint->getSet());
        $this->assertEquals($point->getRoute(), $fetchedPoint->getRoute());
    }

    /**
     * @throws OptimisticLockException
     * @throws ORMException
     * @throws NotSupported
     */
    public function testSaveRelateSet(): void
    {
        $set = new Set();
        $set->setName('testowy zestaw');

        $this->entityManager->persist($set);
        $this->entityManager->flush();


        $point = new Point();
        $point->setLat(51.919438);
        $point->setLon(19.145136);
        $point->setName('testowy punkt');
        $point->setWeight(300);
        $point->setSet($set);

        $this->pointRepository->save($point, true);

        $fetchedPoint = $this->pointRepository->find($point->getId());

        $this->assertEquals($set, $fetchedPoint->getSet());
    }

    /**
     * @throws OptimisticLockException
     * @throws ORMException
     * @throws NotSupported
     */
    public function testSaveRelateRoute(): void
    {
        $route = new Route();
        $route->setName('testowa trasa');
        $route->setColor('red');

        $this->entityManager->persist($route);
        $this->entityManager->flush();

        $point = new Point();
        $point->setLat(51.919438);
        $point->setLon(19.145136);
        $point->setName('testowy punkt');
        $point->setWeight(300);
        $point->setRoute($route);

        $this->pointRepository->save($point, true);

        $fetchedPoint = $this->pointRepository->find($point->getId());

        $this->assertEquals($route, $fetchedPoint->getRoute());
    }

    /**
     * @throws NonUniqueResultException
     * @throws NotSupported
     * @throws NoResultException
     */
    public function testRemovePoint(): void
    {
        $point = new Point();
        $point->setLat(51.919438);
        $point->setLon(19.145136);
        $point->setName('testowy punkts');
        $point->setWeight(300);

        $this->pointRepository->save($point, true);

        $countPoints = $this->entityManager->createQueryBuilder()
            ->select('count(p.id)')
            ->from(Point::class, 'p')
            ->getQuery()
            ->getSingleScalarResult();

        $this->assertEquals(1, $countPoints);

        $this->pointRepository->remove($point, true);

        $countPoints = $this->entityManager->createQueryBuilder()
            ->select('count(p.id)')
            ->from(Point::class, 'p')
            ->getQuery()
            ->getSingleScalarResult();

        $this->assertEquals(0, $countPoints);
    }

    public function testGetPointsWithoutRoute(): void
    {
        $set = new Set();
        $set->setName('testowy zestaw');

        $route = new Route();
        $route->setName('testowa trasa');
        $route->setColor('red');

        $this->entityManager->persist($set);
        $this->entityManager->persist($route);
        $this->entityManager->flush();

        $point1 = new Point();
        $point1->setLat(51.919438);
        $point1->setLon(19.145136);
        $point1->setName('testowy punkt');
        $point1->setWeight(300);
        $point1->setSet($set);
        $point1->setRoute($route);

        $point2 = new Point();
        $point2->setLat(51.919438);
        $point2->setLon(19.145136);
        $point2->setName('testowy punkt');
        $point2->setWeight(300);
        $point2->setSet($set);
        $point2->setRoute($route);

        $point3 = new Point();
        $point3->setLat(51.919438);
        $point3->setLon(19.145136);
        $point3->setName('testowy punkt');
        $point3->setWeight(300);
        $point3->setSet($set);

        $this->pointRepository->save($point1, true);
        $this->pointRepository->save($point2, true);
        $this->pointRepository->save($point3, true);

        $pointsCount = count($this->pointRepository->getPointsWithoutRoute($set));

        $this->assertEquals(1, $pointsCount);
    }
}
