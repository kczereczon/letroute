{% extends 'base.html.twig' %}

{% block title %}Letroute - narzÄ™dzie do planowania tras{% endblock %}

{% block body %}
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet'/>

    <div class="hidden twig-data"
         data-points="{{ pointsWithoutRoutes|serialize(format = 'json') }}"
         data-route="{{ route|serialize(format = 'json', context = {'groups': ['route']}) }}"
         data-routes="{{ routes|serialize(format = 'json', context = {'groups': ['route']}) }}"></div>

    <!-- Left Side -->
    <div class="w-1/2 bg-white p-6">
        <!-- Content for the left side -->
        {% if setId %}
            <div class="flex flex-row w-full max-w-full gap-2 w-full mb-2">
                <div class="w-full rounded text-center bg-gray-100 p-3">
                    <form action="{{ path('app_generate_routes', {'id': setId}) }}" method="POST">
                        <div class="grid gap-5 md:grid-cols-4">
                            <div>
                                <label for="maximum_distance" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Max distance
                                    (meters)</label>
                                <input id="maximum_distance" name="maximum_distance" type="range" max="1500000" min="1000" step="10000" value="{{ maximum_distance|default(300000) }}" class="w-full h-2 mb-6 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                                <span id="maximum_distance_value"></span>
                            </div>
                            <div>
                                <label for="maximum_duration" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Max duration
                                    (seconds)</label>
                                <input id="maximum_duration" name="maximum_duration" type="range" max="259200" min="3600" step="3600" value="{{ maximum_duration|default(18000) }}" class="w-full h-2 mb-6 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                                <span id="maximum_duration_value"></span>
                            </div>
                            <div>
                                <label for="radius" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Radius (centroid)</label>
                                <input id="radius" name="radius" type="range" max="300000" min="10000" step="10000" value="{{ radius|default(10000) }}" class="w-full h-2 mb-6 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                                <span id="radius_value"></span>
                            </div>
                            <div class="flex content-center">
                                <button class="inline-block mt-7 h-10 text-sm px-4 py-2 leading-none border rounded text-teal-500 border-teal-500 hover:border-transparent hover:text-teal-400 hover:bg-white">
                                    WYGENERUJ TRASY
                                </button>
                            </div>
                        </div>
                    </form>

                </div>
            </div>
        {% endif %}
        <div class="flex flex-row h-full max-h-full gap-2 w-full">
            <div class="sets basis-1/3 h-full">
                <div class="w-full rounded text-center bg-gray-100 p-3">Zbiory</div>
                <div>
                    {% for set in sets %}
                        <a class="set" href="{{ path('app_set', {'setId': set.id}) }}">
                            <div :class="setId == '{{ set.id }}' ? 'bg-teal-300' : ''"
                                 class="border-b-2 hover:bg-teal-100">{{ set.name }}</div>
                        </a>
                    {% endfor %}
                </div>
            </div>
            <div class="routes basis-1/3 full-height-with-padding">
                <div class="w-full rounded text-center bg-gray-100 p-3">Trasy
                </div>
                <div class="max-h-full overflow-scroll full-height-with-padding">
                    {% for route in routes %}
                        <a href="{{ path('app_set', {'setId': setId, 'routeId': route.id}) }}">
                            <div :class="routeId == '{{ route.id }}' ? 'bg-teal-300' : ''"
                                 class="border-b-2 hover:bg-teal-100"><span
                                        style="color: #{{ route.color }}">{{ route.name }}</span>
                                - {{ (route.distance / 1000) | round(1, 'floor') }} km
                                - {{ ((route.duration / 60) / 60) | round(1, 'floor') }} h
                            </div>
                        </a>
                    {% endfor %}
                </div>
            </div>
            <div class="points basis-1/3 h-full">
                <div class="w-full rounded text-center bg-gray-100 p-3">Punkty
                </div>
                <div>
                    {% if routeId %}
                        {% for point in points %}
                            <div class="border-b-2 hover:bg-teal-100">{{ point.name }}</div>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Right Side -->
    <div class="w-1/2 bg-gray-400">
        <!-- Content for the right side -->
        <div id="map" class="h-full w-full"></div>
    </div>

    <script>

        const maxDistance = document.getElementById('maximum_distance');
        const maxDistanceValue = document.getElementById('maximum_distance_value');

        const onMaxDistanceUpdate = () => maxDistanceValue.innerText = Math.floor((maxDistance.value / 1000) * 100) / 100 + "km";

        onMaxDistanceUpdate();

        maxDistance.addEventListener("input", onMaxDistanceUpdate);

        const maxDuration = document.getElementById('maximum_duration');
        const maxDurationValue = document.getElementById('maximum_duration_value');

        const onMaxDurationUpdate = () => maxDurationValue.innerText = Math.floor((maxDuration.value / 3600) * 100) / 100 + "h";

        onMaxDurationUpdate();

        maxDuration.addEventListener("input", onMaxDurationUpdate);

        const radius = document.getElementById('radius');
        const radiusValue = document.getElementById('radius_value');

        const onRadiusUpdate = () => radiusValue.innerText = Math.floor((radius.value / 1000) * 100) / 100 + "km";

        onRadiusUpdate();

        radius.addEventListener("input", onRadiusUpdate);

        mapboxgl.accessToken = "pk.eyJ1Ijoia2N6ZXJlY3pvbiIsImEiOiJja29zdmZpM3YwNWhqMndvYWphemc0MDBoIn0.i558tTzbzGDUtvye0cYfcw";
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v12',
            center: [19.0, 52.0],
            zoom: 5
        });

        let twigData = document.querySelector('.twig-data');
        let routes = JSON.parse(twigData.dataset.routes);
        let route = JSON.parse(twigData.dataset.route);
        let points = JSON.parse(twigData.dataset.points);

        console.log(points);

        map.on('load', () => {

            points.forEach(point => {
                console.log(point)
                const marker = new mapboxgl.Marker({
                    color: "#FFFFFF",
                    draggable: false
                }).setLngLat([point.lon, point.lat])
                    .addTo(map);
            })

            if (!route) {
                routes.forEach(route => {
                    route.points.forEach(point => {
                        const marker = new mapboxgl.Marker({
                            color: "#" + route.color,
                            draggable: false
                        }).setLngLat([point.lon, point.lat])
                            .addTo(map);
                    })

                    try {
                        map.addSource("route" + route.id, {
                            'type': 'geojson',
                            'data': route.routeData
                        });
                    } catch (e) {
                        // console.log(e);
                    }

                    map.addLayer({
                        'id': "route" + route.id,
                        'type': 'line',
                        'source': "route" + route.id,
                        'layout': {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        'paint': {
                            'line-color': '#' + route.color,
                            'line-width': 8
                        }
                    });
                })
            } else {
                route.points.forEach(point => {
                    const marker = new mapboxgl.Marker({
                        color: "#" + route.color,
                        draggable: false
                    }).setLngLat([point.lon, point.lat])
                        .addTo(map);
                });

                map.addSource("route" + route.id, {
                    'type': 'geojson',
                    'data': route.routeData
                });

                map.addLayer({
                    'id': "route" + route.id,
                    'type': 'line',
                    'source': "route" + route.id,
                    'layout': {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    'paint': {
                        'line-color': '#' + route.color,
                        'line-width': 8
                    }
                });
            }

            const el = document.createElement('div');
            el.className = 'marker';

            const marker = new mapboxgl.Marker(el, {draggable: true}).setLngLat([19.145136, 51.919438])
                .addTo(map);
        })
    </script>
{% endblock %}